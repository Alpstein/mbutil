#!/usr/bin/env python

# MBUtil: a tool for MBTiles files
# Supports importing, exporting, and more
#
# (c) Development Seed 2012
# Licensed under BSD

import logging, os, sys
from optparse import OptionParser, OptionGroup

from mbutil import mbtiles_to_disk, disk_to_mbtiles, mbtiles_create, merge_mbtiles, optimize_database_file, compact_mbtiles, check_mbtiles, execute_commands_on_mbtiles

if __name__ == '__main__':

    logging.basicConfig(level=logging.INFO)

    parser = OptionParser(usage="""usage: %prog [command] [options] file|directory [file|directory ...]

    Examples:

    Export an mbtiles database to a directory of files:
    $ mb-util --export world.mbtiles tiles

    Import a directory of tiles into an mbtiles database:
    $ mb-util --import tiles world.mbtiles

    Create an empty mbtiles file:
    $ mb-util --create empty.mbtiles

    Execute commands on all tiles in the mbtiles file:
    $ mb-util --execute "COMMAND ARGUMENTS" [--execute "SECOND COMMAND"] world.mbtiles

    Merge two or more mbtiles files (receiver will be the first file):
    $ mb-util --merge receiver.mbtiles file1.mbtiles [file2.mbtiles ...]

    Check if a mbtiles file contains all tiles at a specific zoom level and remove unused tiles:
    $ mb-util --check world.mbtiles

    Compact a mbtiles file by eliminating duplicate images:
    $ mb-util --compact world.mbtiles
    """)

    group = OptionGroup(parser, "Commands", "These are the commands to use on mbtiles databases")

    group.add_option("-e", "--export",
        dest='export_tiles', action="store_true",
        help='''Export an mbtiles database to a directory of files. If the directory exists, any already existing tiles will be overwritten.''',
        default=False)

    group.add_option("-i", "--import",
        dest='import_tiles', action="store_true",
        help='''Import a directory of tiles into an mbtiles database. If the mbtiles database already exists, existing tiles will be overwritten with the imported tiles.''',
        default=False)

    group.add_option("-m", "--merge",
        dest='merge_tiles', action="store_true",
        help='''Merge two or more databases. The receiver will be created if it doesn\'t yet exist.''',
        default=False)

    group.add_option("--check",
        dest='check', action="store_true",
        help='''Check the database for missing tiles and remove unnecessary tiles.''',
        default=False)

    group.add_option("--compact",
        dest='compact', action="store_true",
        help='''Eliminate duplicate images to reduce mbtiles filesize.''',
        default=False)

    group.add_option("--create",
        action="store_true", dest="create", default=False,
        help='''Create an empty mbtiles database.''')

    group.add_option("--process",
        action="store_true", dest="process", default=False,
        help='''Processes a mbtiles databases. Only usefull together with one or more --execute.''')

    parser.add_option_group(group)

    group = OptionGroup(parser, "Options", "")

    group.add_option("--execute",
        dest="command_list", type="string", metavar="COMMAND",
        action="append", default=None,
        help='''Commands to execute for each tile image. %s will be replaced with the file name. This argument may be repeated several times and can be used together with --import/--export/--merge/--compact/--process.''')

    group.add_option('--flip-y', dest='flip_y',
        help='''Flip the y tile coordinate during --export/--import/--merge.''',
        action="store_true", default=False)

    group.add_option('--min-zoom', dest='min_zoom',
        help='''Minimum zoom level for --export/--import/--merge/--execute/--check.''',
        type="int", default=0)

    group.add_option('--max-zoom', dest='max_zoom',
        help='''Maximum zoom level for --export/--import/--merge/--execute/--check.''',
        type="int", default=255)

    group.add_option('--zoom', dest='zoom',
        help='''Zoom level for --export/--import/--execute/--check. (Overrides --min-zoom and --max-zoom)''',
        type='int', default=-1)

    group.add_option("--no-overwrite",
        action="store_true", dest="no_overwrite", default=False,
        help='''don't overwrite existing tiles during --merge, --import.''')

    group.add_option("--auto-commit",
        action="store_true", dest="auto_commit", default=False,
        help='''Enable auto commit for --merge, --import, --execute.''')

    group.add_option("--check-before-merge",
        action="store_true", dest="check_before_merge", default=False,
        help='''Runs some basic checks (like --check) on mbtiles before merging them.''')

    group.add_option("--no-vacuum",
        action="store_true", dest="skip_vacuum", default=False,
        help='''don't VACUUM the mbtiles database after --import, --merge, --execute, --compact.''')

    group.add_option("--no-analyze",
        action="store_true", dest="skip_analyze", default=False,
        help='''don't ANALYZE the mbtiles database after --import, --merge, --execute, --compact.''')

    group.add_option("-q", "--quiet",
        action="store_true", dest="quiet", default=False,
        help='''don't print any status messages to stdout except errors.''')

    group.add_option("-d", "--debug",
        action="store_true", dest="debug", default=False,
        help='''print debug messages to stdout (exclusive to --quiet).''')

    parser.add_option_group(group)

    (options, args) = parser.parse_args()

    # Transfer operations
    if len(args) == 0:
        parser.print_help()
        sys.exit(1)

    if options.quiet:
        logging.getLogger().setLevel(logging.ERROR)
    elif options.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    if len(args) == 1:
        # Check the mbtiles db?
        if options.check:
            if not os.path.isfile(args[0]):
                sys.stderr.write('The mbtiles database to check must exist.\n')
                sys.exit(1)
            result = check_mbtiles(args[0], **options.__dict__)
            sys.exit(0) if result else sys.exit(1)

        # Execute commands on the tiles in the mbtiles db?
        if options.process:
            if not os.path.isfile(args[0]):
                sys.stderr.write('The mbtiles database to process must exist.\n')
                sys.exit(1)
            execute_commands_on_mbtiles(args[0], **options.__dict__)
            optimize_database_file(args[0], options.skip_analyze, options.skip_vacuum)
            sys.exit(0)

        if options.compact:
            if not os.path.isfile(args[0]):
                sys.stderr.write('The mbtiles database to compact must exist.\n')
                sys.exit(1)
            compact_mbtiles(args[0])
            optimize_database_file(args[0], options.skip_analyze, options.skip_vacuum)
            sys.exit(0)

        # Create an empty mbtiles db?
        if options.create:
            if os.path.exists(args[0]):
                sys.stderr.write('The mbtiles database to create must not exist yet.\n')
                sys.exit(1)
            mbtiles_create(args[0], **options.__dict__)
            sys.exit(0)

        sys.stderr.write("No command given, don't know what to do. Exiting...")
        sys.exit(0)

    # merge mbtiles files
    if options.merge_tiles:
        if not os.path.isfile(args[0]):
            mbtiles_create(args[0], **options.__dict__)

        receiving_mbtiles = args[0]
        for n in range(1, len(args)):
            other_mbtiles = args[n]
            if not options.quiet:
                logging.info("%d: Merging %s" % (n, other_mbtiles))
            if not os.path.isfile(other_mbtiles):
                continue
            merge_mbtiles(receiving_mbtiles, other_mbtiles, **options.__dict__)

        optimize_database_file(args[0], options.skip_analyze, options.skip_vacuum)
        sys.exit(0)

    # export from mbtiles to disk
    if options.export_tiles:
        if not os.path.isfile(args[0]):
            sys.stderr.write('The mbtiles database to export must exist.\n')
            sys.exit(1)

        mbtiles_file, directory_path = args
        mbtiles_to_disk(mbtiles_file, directory_path, **options.__dict__)
        sys.exit(0)

    # import from disk to mbtiles
    if options.import_tiles:
        if not os.path.isdir(args[0]):
            sys.stderr.write('The directory to import from must exist.\n')
            sys.exit(1)

        directory_path, mbtiles_file = args
        disk_to_mbtiles(directory_path, mbtiles_file, **options.__dict__)
        optimize_database_file(mbtiles_file, options.skip_analyze, options.skip_vacuum)
        sys.exit(0)
